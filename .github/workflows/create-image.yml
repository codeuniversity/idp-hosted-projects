name: "initial-image-build-workflow"

on:
  # Trigger a specific workflow run on demand without need for a code push/pull request
  workflow_dispatch:
    inputs:
      githubRepo:
        description: "Link of public github repo to deploy"
        required: true

jobs:
  create_submodule:
    permissions:
      contents: "write"

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: create_student_submodule
        name: Add student's repo as a submodule
        run: |
          echo "YEAR=$(date '+%Y')" >> $GITHUB_ENV
          echo "USER_NAME=$(echo "${{ github.event.inputs.githubRepo }}" | cut -d'/' -f4)" >> $GITHUB_ENV
          echo "REPO_NAME=$(echo "${{ github.event.inputs.githubRepo }}" | cut -d'/' -f5)" >> $GITHUB_ENV

          year=$(date '+%Y')
          user_name=$(echo "${{ github.event.inputs.githubRepo }}" | cut -d'/' -f4)
          repo_name=$(echo "${{ github.event.inputs.githubRepo }}" | cut -d'/' -f5)

          if [ ! -d submissions-${year}/${user_name}-${repo_name} ]; then
            echo "Adding ${{ github.event.inputs.githubRepo }} to ./submissions-${year}/${user_name}-${repo_name}/${user_name}-${repo_name} as a submodule"

            git config --global user.name github-actions
            git config --global user.email github-actions@github.com

            mkdir submissions-${year}
            cd ./submissions-${year}
            mkdir ${user_name}-${repo_name}
            cd ./${user_name}-${repo_name}

            git submodule add ${{ github.event.inputs.githubRepo }} ./${user_name}-${repo_name}
            git commit -m "Added ${user_name}-${repo_name} as a submodule by github-actions"
            git push

            echo "STATUS=$(echo 'success')" >> $GITHUB_ENV
          else
            echo "Submodule already exists, terminating github actions"
            echo "STATUS=$(echo 'failure')" >> $GITHUB_ENV

          fi

    outputs:
      status: ${{ env.STATUS }}
      year: ${{ env.YEAR }}
      user_name: ${{ env.USER_NAME }}
      repo_name: ${{ env.REPO_NAME }}

  get_repository_dependencies:
    needs: create_submodule
    permissions:
      contents: "write"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    if: needs.create_submodule.outputs.status == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Pull the changes made in the repository.
        run: git pull --recurse-submodules

      - name: Clone the code in the repository of the submodule
        run: |
          cd ./submissions-${{ needs.create_submodule.outputs.year }}/${{ needs.create_submodule.outputs.user_name }}-${{ needs.create_submodule.outputs.repo_name}}/${{ needs.create_submodule.outputs.user_name }}-${{ needs.create_submodule.outputs.repo_name}}

          git submodule update --init --recursive

      - name: Prepare the outputs for the next job
        run: |
          echo "YEAR=$(date '+%Y')" >> $GITHUB_ENV
          echo "USER_NAME=$(echo "${{ github.event.inputs.githubRepo }}" | cut -d'/' -f4)" >> $GITHUB_ENV
          echo "REPO_NAME=$(echo "${{ github.event.inputs.githubRepo }}" | cut -d'/' -f5)" >> $GITHUB_ENV
          echo "SHA_VALUE=$(echo git submodule status)" >> $GITHUB_ENV

      - name: Get submodule's dependencies
        run: |
          curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.DEPENDENCY_GRAPH_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ needs.create_submodule.outputs.user_name }}/${{ needs.create_submodule.outputs.repo_name }}/dependency-graph/sbom << json_value

          echo "JSON_VALUE=$(echo json_value )"  >> $GITHUB_ENV

      - name: Look for express dependencies
        run: |
          echo ${{ env.JSON_VALUE }}

          echo "EXPRESS_VALUE=$( echo ${{ env.JSON_VALUE }} | jq '.externalRefs[] | select(.referenceLocator | test("pkg:npm/express")) | .referenceLocator')" >> $GITHUB_ENV

          echo ${{ env.EXPRESS_VALUE }}

      - name: Check if the JSON file was created successfully
        run: |
          if [[ test(${{ env.EXPRESS_VALUE }}) ]]; then
           if [[ -f 'package.json' ]]; then
             echo "Found Express value"
           fi 
          else
            echo "value does not exist!"
          fi
    outputs:
      current_comment_sha: ${{ env.SHA_VALUE }}
      year: ${{ env.YEAR }}
      user_name: ${{ env.USER_NAME }}
      repo_name: ${{ env.REPO_NAME }}
# need to add export DOCKER_BUILDKIT=1 before building python docker image
